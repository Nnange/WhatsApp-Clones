{"version":3,"sources":["firebase.js","StateProvider.js","components/Chat.js","reducer.js","components/Login.js","components/SidebarChat.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Chat","useState","input","setInput","roomId","useParams","roomName","setRoomName","messages","setMessages","user","seed","useEffect","collection","doc","onSnapshot","snapshot","data","name","orderBy","docs","map","className","Avatar","src","Date","length","timestamp","toDate","toUTCString","IconButton","SearchOutlined","AttachFile","MoreVert","message","displayName","onChange","e","target","placeholder","type","onClick","preventDefault","console","log","add","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","SidebarChat","id","addNewChat","setSeed","Math","floor","random","prompt","to","Sidebar","rooms","setRoooms","unsubscribe","photoURL","room","key","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"meAeQA,EAFcC,IAASC,cAXR,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAKMC,YACjBC,EAAOX,IAASW,OAChBC,EAAW,IAAIZ,IAASW,KAAKE,mBAGpBd,IClBJe,EAAeC,0BAGfC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,SAA1B,OACzB,kBAACL,EAAaM,SAAd,CAAuBC,MAAQC,qBAAWL,EAASC,IAC9CC,IAIII,EAAgB,kBAAMC,qBAAWV,ICoG/BW,EAnGF,WAAO,IAAD,MACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,KAETC,EAAWC,cAAXD,OAFS,EAGeH,mBAAS,IAHxB,mBAGVK,EAHU,KAGAC,EAHA,OAIeN,mBAAS,IAJxB,mBAIVO,EAJU,KAIAC,EAJA,OAKkBX,IALlB,0BAKRY,EALQ,EAKRA,KAAMC,EALE,EAKFA,KALE,KAOjBC,qBAAU,WACJR,IACF9B,EAAGuC,WAAW,SACXC,IAAIV,GACJW,YAAW,SAACC,GAAD,OAAcT,EAAYS,EAASC,OAAOC,SAExD5C,EAAGuC,WAAW,SACXC,IAAIV,GACJS,WAAW,YACXM,QAAQ,YAAa,OACrBJ,YAAW,SAACC,GAAD,OACVP,EAAYO,EAASI,KAAKC,KAAI,SAACP,GAAD,OAASA,EAAIG,iBAGhD,CAACb,IAeJ,OACE,yBAAKkB,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAACC,EAAA,EAAD,CAAQC,IAAG,iDAA4Cb,EAA5C,UAEX,yBAAKW,UAAU,oBACb,4BAAKhB,GACL,uCACY,IACT,IAAImB,KAAJ,UACCjB,EAASA,EAASkB,OAAS,UAD5B,iBACC,EAA+BC,iBADhC,aACC,EAA0CC,UAC1CC,gBAGN,yBAAKP,UAAU,qBACb,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,OAEF,kBAACD,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,OAEF,kBAACF,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,SAKN,yBAAKX,UAAU,cACZd,EAASa,KAAI,SAACa,GAAD,aACZ,uBACEZ,UAAS,wBACPY,EAAQhB,OAASR,EAAKyB,aAAe,mBAGvC,0BAAMb,UAAU,cAAcY,EAAQhB,MACrCgB,EAAQA,QACT,0BAAMZ,UAAU,mBACb,IAAIG,KAAJ,UAASS,EAAQP,iBAAjB,aAAS,EAAmBC,UAAUC,oBAM/C,yBAAKP,UAAU,gBACb,kBAAC,IAAD,MACA,0BAAMA,UAAU,cACd,kBAAC,IAAD,OAEF,8BACE,2BACE1B,MAAOM,EACPkC,SAAU,SAACC,GAAD,OAAOlC,EAASkC,EAAEC,OAAO1C,QACnC2C,YAAY,iBACZC,KAAK,SAEP,4BAAQC,QApEI,SAACJ,GACnBA,EAAEK,iBACFC,QAAQC,IAAI,aAAc1C,GAE1B5B,EAAGuC,WAAW,SAASC,IAAIV,GAAQS,WAAW,YAAYgC,IAAI,CAC5DX,QAAShC,EACTgB,KAAMR,EAAKyB,YACXR,UAAWpD,IAASU,UAAU6D,WAAWC,oBAG3C5C,EAAS,MA0DH,mBAEF,kBAAC,IAAD,S,iCCpGK6C,EACD,WADCA,EAED,WAsBGxD,EAnBC,SAACyD,EAAOC,GAEtB,OADAP,QAAQC,IAAIM,GACJA,EAAOV,MACb,KAAKQ,EACH,OAAO,2BACFC,GADL,IAEEvC,KAAMwC,EAAOxC,OAEjB,KAAKsC,EACH,OAAO,2BACFC,GADL,IAEEtC,KAAMuC,EAAOvC,OAGjB,QACE,OAAOsC,ICkBEE,EAnCD,WAAO,IAAD,EAEOrD,IAFP,yCAELsD,EAFK,KAgBlB,OACE,yBAAK9B,UAAU,SACb,yBAAKA,UAAU,oBACb,yBACEE,IAAI,gGACJ6B,IAAI,KAEN,yBAAK/B,UAAU,eACb,0DAGF,kBAACgC,EAAA,EAAD,CAAQd,KAAK,SAASC,QAvBb,WACbvD,EACCqE,gBAAgBpE,GAChBqE,MAAK,SAAAC,GACEL,EAAS,CACLZ,KAAKQ,EACLtC,KAAM+C,EAAO/C,UAGxBgD,OAAM,SAAAC,GAAK,OAAIC,MAAMD,EAAMzB,cAcxB,0B,2DC4BO2B,G,MAvDK,SAAC,GAA8B,IAAD,EAA3BC,EAA2B,EAA3BA,GAAI5C,EAAuB,EAAvBA,KAAM6C,EAAiB,EAAjBA,WAAiB,EACxB9D,mBAAS,IADe,mBACzCU,EADyC,KACnCqD,EADmC,OAEhB/D,mBAAS,IAFO,mBAEzCO,EAFyC,KAE/BC,EAF+B,OAGnBX,IAHmB,mBAG/BsD,GAH+B,KAGvC1C,KAHuC,MAKhDE,qBAAU,WACJkD,GACFxF,EAAGuC,WAAW,SACXC,IAAIgD,GACJjD,WAAW,YACXM,QAAQ,YAAa,QACrBJ,YAAW,SAACC,GAAD,OACVP,EAAYO,EAASI,KAAKC,KAAI,SAACP,GAAD,OAASA,EAAIG,gBAGhD,CAAC6C,IAEJlD,qBAAU,WACRoD,EAAQC,KAAKC,MAAsB,IAAhBD,KAAKE,aACvB,IAmBH,OAAQJ,EAWN,yBAAKtB,QArBY,WACjB,IAAMnC,EAAW8D,OAAO,8BAEpB9D,GACFhC,EAAGuC,WAAW,SAASgC,IAAI,CACzB3B,KAAMZ,KAgBgBgB,UAAU,eAClC,6CAXF,kBAAC,IAAD,CAAM+C,GAAE,iBAAYP,GAAMrB,QAlBX,WACfW,EAAS,CACPZ,KAAMQ,EACNrC,KAAMA,MAgBN,yBAAKW,UAAU,eACb,kBAACC,EAAA,EAAD,CAAQC,IAAG,iDAA4Cb,EAA5C,UACX,yBAAKW,UAAU,qBACb,4BAAKJ,GACL,qCAAIV,EAAS,UAAb,aAAI,EAAa0B,cCUZoC,EAnDC,WAAO,IAAD,EACOrE,mBAAS,IADhB,mBACbsE,EADa,KACNC,EADM,OAES1E,IAFT,mBAEXY,EAFW,KAEXA,KAFW,KAmBpB,OAfAE,qBAAU,WACR,IAAM6D,EAAcnG,EAAGuC,WAAW,SAASE,YAAW,SAACC,GAAD,OACpDwD,EACExD,EAASI,KAAKC,KAAI,SAACP,GAAD,MAAU,CAC1BgD,GAAIhD,EAAIgD,GACR7C,KAAMH,EAAIG,eAKhB,OAAO,WACLwD,OAED,IAGD,yBAAKnD,UAAU,WACb,yBAAKA,UAAU,mBACb,kBAACC,EAAA,EAAD,CAAQC,IAAG,OAAEd,QAAF,IAAEA,OAAF,EAAEA,EAAMgE,WACnB,yBAAKpD,UAAU,wBACb,kBAACQ,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,SAIN,yBAAKR,UAAU,mBACb,yBAAKA,UAAU,4BACb,kBAACS,EAAA,EAAD,MACA,2BAAOQ,YAAY,2BAA2BC,KAAK,WAGvD,yBAAKlB,UAAU,kBACb,kBAAC,EAAD,CAAayC,YAAU,IACtBQ,EAAMlD,KAAI,SAACsD,GAAD,OACT,kBAAC,EAAD,CAAaC,IAAKD,EAAKb,GAAIA,GAAIa,EAAKb,GAAI5C,KAAMyD,EAAK1D,KAAKC,aCpBnD2D,MA3Bf,WAAgB,IAAD,EACsB/E,IADtB,0BACJY,EADI,EACJA,KAAMC,EADF,EACEA,KAEf,OAHa,KAIX,yBAAKW,UAAU,OACXZ,EAGA,yBAAKY,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwD,KAAK,kBACV,kBAAC,EAAD,CAAMF,IAAKjE,KAGb,kBAAC,IAAD,CAAOmE,KAAK,KACV,kBAAC,EAAD,CAAMF,IAAKjE,QAXnB,kBAAC,EAAD,QCFYoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAe7F,aNVS,CAC1BiB,KAAM,KACNC,KAAM,IMQuCnB,QAASA,GAClD,kBAAC,EAAD,QAGJ+F,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAMzB,c","file":"static/js/main.0a2e45dd.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nimport firebase from \"firebase\";\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCeblBEV7wqchTyAfO52BtSvDn5unAInIA\",\r\n    authDomain: \"whatsapp-clone-6f076.firebaseapp.com\",\r\n    databaseURL: \"https://whatsapp-clone-6f076.firebaseio.com\",\r\n    projectId: \"whatsapp-clone-6f076\",\r\n    storageBucket: \"whatsapp-clone-6f076.appspot.com\",\r\n    messagingSenderId: \"1027475739101\",\r\n    appId: \"1:1027475739101:web:4e944a79d49e6bcc06e634\",\r\n    measurementId: \"G-JN470NRWM6\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\n  const db = firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export { auth, provider };\r\n  export default db;","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n    <StateContext.Provider value= {useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport { AttachFile, MoreVert, SearchOutlined } from \"@material-ui/icons\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"../CSS/Chat.css\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport db from \"../firebase\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport firebase from \"firebase\";\r\n\r\nconst Chat = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const { roomId } = useParams();\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [{ user, seed }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    if (roomId) {\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .onSnapshot((snapshot) => setRoomName(snapshot.data().name));\r\n\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [roomId]);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"you typed \", input);\r\n\r\n    db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n      message: input,\r\n      name: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__header\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n\r\n        <div className=\"chat__headerInfo\">\r\n          <h3>{roomName}</h3>\r\n          <p>\r\n            Last seen{\" \"}\r\n            {new Date(\r\n              messages[messages.length - 1]?.timestamp?.toDate()\r\n            ).toUTCString()}\r\n          </p>\r\n        </div>\r\n        <div className=\"chat__headerRight\">\r\n          <IconButton>\r\n            <SearchOutlined />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFile />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVert />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat__body\">\r\n        {messages.map((message) => (\r\n          <p\r\n            className={`chat__message ${\r\n              message.name === user.displayName && \"chat__receiver\"\r\n            }`}\r\n          >\r\n            <span className=\"chat__name\">{message.name}</span>\r\n            {message.message}\r\n            <span className=\"chat__timestamp\">\r\n              {new Date(message.timestamp?.toDate()).toUTCString()}\r\n            </span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"chat__footer\">\r\n        <InsertEmoticonIcon />\r\n        <span className=\"attachIcon\">\r\n          <AttachFileIcon />\r\n        </span>\r\n        <form>\r\n          <input\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder=\"Type a message\"\r\n            type=\"text\"\r\n          />\r\n          <button onClick={sendMessage}>Send a message</button>\r\n        </form>\r\n        <MicIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","export const initialState = {\r\n  user: null,\r\n  seed: \"\",\r\n};\r\n\r\nexport const actionTypes = {\r\n  SET_USER: \"SET_USER\",\r\n  ADD_SEED: \"ADD_SEED\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n    case actionTypes.ADD_SEED:\r\n      return {\r\n        ...state,\r\n        seed: action.seed,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { Button } from \"@material-ui/core\";\r\nimport { auth, provider } from \"../firebase\";\r\nimport React from \"react\";\r\nimport \"../CSS/Login.css\";\r\nimport { actionTypes } from \"../reducer\";\r\nimport { useStateValue } from \"../StateProvider\";\r\n\r\n\r\nconst Login = () => {\r\n\r\n    const [{}, dispatch] = useStateValue();\r\n\r\n  const signIn = () => {\r\n    auth\r\n    .signInWithPopup(provider)\r\n    .then(result => {\r\n            dispatch({\r\n                type:actionTypes.SET_USER,\r\n                user: result.user,\r\n            });\r\n        })\r\n    .catch(error => alert(error.message));\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__container\">\r\n        <img\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/598px-WhatsApp.svg.png\"\r\n          alt=\"\"\r\n        />\r\n        <div className=\"login__text\">\r\n          <h1>Sign in to WhatsApp-Clone</h1>\r\n        </div>\r\n\r\n        <Button type=\"submit\" onClick={signIn}>\r\n          Sign In with Google\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../CSS/SidebarChat.css\";\r\nimport db from \"../firebase\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport { actionTypes } from \"../reducer\";\r\n\r\nconst SidebarChat = ({ id, name, addNewChat }) => {\r\n  const [seed, setSeed] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      db.collection(\"rooms\")\r\n        .doc(id)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, []);\r\n\r\n  const sendSeed = () => {\r\n    dispatch({\r\n      type: actionTypes.ADD_SEED,\r\n      seed: seed,\r\n    });\r\n  };\r\n\r\n  const createChat = () => {\r\n    const roomName = prompt(\"please enter name for chat\");\r\n\r\n    if (roomName) {\r\n      db.collection(\"rooms\").add({\r\n        name: roomName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return !addNewChat ? (\r\n    <Link to={`/rooms/${id}`} onClick={sendSeed}>\r\n      <div className=\"sidebarChat\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n        <div className=\"sidebarChat__info\">\r\n          <h2>{name}</h2>\r\n          <p>{messages[0]?.message}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  ) : (\r\n    <div onClick={createChat} className=\"sidebarChat\">\r\n      <h2>Add new Chat</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SidebarChat;\r\n","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"../CSS/Sidebar.css\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport { SearchOutlined } from \"@material-ui/icons\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport db from \"../firebase\";\r\nimport { useStateValue } from \"../StateProvider\";\r\n\r\nconst Sidebar = () => {\r\n  const [rooms, setRoooms] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = db.collection(\"rooms\").onSnapshot((snapshot) =>\r\n      setRoooms(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <Avatar src={user?.photoURL} />\r\n        <div className=\"sidebar__headerRight\">\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__search\">\r\n        <div className=\"sidebar__searchContainer\">\r\n          <SearchOutlined />\r\n          <input placeholder=\"Search or start new chat\" type=\"text\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__chats\">\r\n        <SidebarChat addNewChat />\r\n        {rooms.map((room) => (\r\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Chat from \"./components/Chat\";\nimport Login from \"./components/Login\";\nimport Sidebar from \"./components/Sidebar\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction App() {\n  const [{ user, seed }, dispatch] = useStateValue();\n\n  return (\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app__body\">\n          <Router>\n            <Sidebar />\n            <Switch>\n              <Route path=\"/rooms/:roomId\">\n                <Chat key={seed} />\n              </Route>\n\n              <Route path=\"/\">\n                <Chat key={seed} />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./StateProvider\";\nimport reducer, { initialState } from \"./reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}